import { Telegraf, Markup } from 'telegraf';
import * as path from 'path';
import * as fs from 'fs/promises';
import { main as generateContent } from '../index';
import { getNextTopic } from '../topics/utils';
import { generatePrompt } from '../ai/gpt';
import { uploadToYouTube } from '../youtube/upload';
import * as dotenv from 'dotenv';
dotenv.config();

const TG_BOT_TOKEN = process.env.TG_BOT_TOKEN!;
const SHARED_DIR = path.resolve(__dirname, '../../shared');

const bot = new Telegraf(TG_BOT_TOKEN);

bot.start(async ctx => {
  await ctx.reply(
    'ü§ñ –Ø AI-Influencer. –ß—Ç–æ –¥–µ–ª–∞–µ–º?',
    Markup.inlineKeyboard([
      [Markup.button.callback('üìù Generate promt', 'promt_gen')],
      [Markup.button.callback('üé¨ Generate video', 'video_gen')],
      [Markup.button.callback('‚¨ÜÔ∏è Upload last video on YouTube', 'upload')]
    ])
  );
});

bot.action('promt_gen', async ctx => {
  await ctx.reply('Generating prompt...');
  try {
    const topic = await getNextTopic();
    if (!topic) {
      await ctx.reply('There are no themes for videos.');
      return;
    }
    const prompt = await generatePrompt(topic);
    await ctx.reply('Generated prompt:\n\n' + prompt);
  } catch (e: any) {
    await ctx.reply('Generation error: ' + e.message);
  }
  await ctx.answerCbQuery();
});

bot.action('video_gen', async ctx => {
    await ctx.reply('Generating video content...');
    try {
      const outFile = await generateContent();
      if (!outFile) {
        await ctx.reply('There are not theme for videos.');
        return;
      }
      await ctx.replyWithVideo({ source: outFile });
    } catch (e: any) {
      await ctx.reply('Generation error: ' + e.message);
    }
    await ctx.answerCbQuery();
});

bot.action('upload', async ctx => {
  try {
    const files = await fs.readdir(SHARED_DIR);
    const stats = await Promise.all(
        files
          .filter(f => f.endsWith('_final.mp4'))
          .map(async f => ({
            file: f,
            mtime: (await fs.stat(path.join(SHARED_DIR, f))).mtimeMs,
          }))
    );

    stats.sort((a, b) => b.mtime - a.mtime);
    
    if (!stats.length) throw new Error('There are no created videos.');
    const filePath = path.join(SHARED_DIR, stats[0].file);
    const ytId = await uploadToYouTube(filePath, 'AI Short', 'Autogenerated by AI influencer');
    await ctx.reply('–ó–∞–ª–∏—Ç–æ –Ω–∞ YouTube! https://youtu.be/' + ytId);
  } catch (e: any) {
    await ctx.reply('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ' + e.message);
  }
  await ctx.answerCbQuery();
});

export function launchBot() {
  bot.launch();
  console.log('Telegram-bot launched!');
}